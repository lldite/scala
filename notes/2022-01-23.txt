scala> (1 to 5).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(i)("*").mkString).mkString("\n")
val res11: String =
----*
---**
--***
-****
*****

scala> (1 to h).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(i)("*").mkString ++ List.fill(i)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res15: String =
----**----
---****---
--******--
-********-
**********

scala> (1 to h).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(i-1)("*").mkString ++ List.fill(i)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res17: String =
----*----
---***---
--*****--
-*******-
*********

scala> (1 to h).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(i-1)("*").mkString ++ List.fill(i)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n").reverse
val res18: String =
*********
-*******-
--*****--
---***---
----*----

cala> (1 to h).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(2*i-1)("*").mkString  ++ List.fill(h-i)("-").mkString).mkString("\n") ++ (1 to h-1).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(2*i-1)("*").mkString  ++ List.fill(h-i)("-").mkString).mkString("\n").reverse
val res29: String =
----------*----------
---------***---------
--------*****--------
-------*******-------
------*********------
-----***********-----
----*************----
---***************---
--*****************--
-*******************-
*********************-*******************-
--*****************--
---***************---
----*************----
-----***********-----
------*********------
-------*******-------
--------*****--------
---------***---------
----------*----------

scala> (1 to h).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(2*i-1)("*").mkString  ++ List.fill(h-i)("-").mkString).mkString("\n") ++ ("\n") ++ (1 to h-1).toList.map( i => List.fill(h-i)("-").mkString ++  List.fill(2*i-1)("*").mkString  ++ List.fill(h-i)("-").mkString).mkString("\n").reverse
val res10: String =
----------*----------
---------***---------
--------*****--------
-------*******-------
------*********------
-----***********-----
----*************----
---***************---
--*****************--
-*******************-
*********************
-*******************-
--*****************--
---***************---
----*************----
-----***********-----
------*********------
-------*******-------
--------*****--------
---------***---------
----------*----------

scala> (1 to h).toList.map( i =>( List.fill(h-i)("-").mkString ++  List.fill(2*i-1)("*").mkString  ++ List.fill(h-i)("-").mkString)*2).mkString("\n")
val res14: String =
----------*--------------------*----------
---------***------------------***---------
--------*****----------------*****--------
-------*******--------------*******-------
------*********------------*********------
-----***********----------***********-----
----*************--------*************----
---***************------***************---
--*****************----*****************--
-*******************--*******************-
******************************************

scala> val h=7
val h: Int = 7

scala> val R= 3
val R: Int = 3

scala> (1 to h).toList.map( i => (List.fill(h-i)("-").mkString ++  List.fill(2*i-1)("*").mkString  ++ List.fill(h-i)("-").mkString)*R).mkString("\n") ++ ("\n") ++ (1 to h-1).toList.map( i => (List.fill(h-i)("-").mkString ++  List.fill(2*i-1)("*").mkString  ++ List.fill(h-i)("-").mkString)*R).mkString("\n").reverse
val res17: String =
------*------------*------------*------
-----***----------***----------***-----
----*****--------*****--------*****----
---*******------*******------*******---
--*********----*********----*********--
-***********--***********--***********-
***************************************
-***********--***********--***********-
--*********----*********----*********--
---*******------*******------*******---
----*****--------*****--------*****----
-----***----------***----------***-----
------*------------*------------*------

scala> List(3,5).map(i => List.fill(h-i)("-").mkString ++ List.fill(2*i-1)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res31: String =
----*****----
--*********--

scala> List(5,5,5).map(i => List.fill(h-i)("-").mkString ++ List.fill(2*i-1)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res32: String =
--*********--
--*********--
--*********--

scala> List(5,4,3).map(i => List.fill(h-i)("-").mkString ++ List.fill(2*i-1)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res33: String =
--*********--
---*******---
----*****----

scala> List(3,4,5,4,3).map(i => List.fill(h-i)("-").mkString ++ List.fill(2*i-1)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res34: String =
----*****----
---*******---
--*********--
---*******---
----*****----

scala> List(1,2,3,4,5,6,7,6,5,4,3,2,1).map(i => List.fill(h-i)("-").mkString ++ List.fill(2*i-1)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res36: String =
------*------
-----***-----
----*****----
---*******---
--*********--
-***********-
*************
-***********-
--*********--
---*******---
----*****----
-----***-----
------*------

scala> (5 to 1 by -1)
val res37: scala.collection.immutable.Range = Range 5 to 1 by -1

scala> (5 to 1 by -1).toList
val res38: List[Int] = List(5, 4, 3, 2, 1)

List(1,2,3,4,5,6,7,6,5,4,3,2,1).map(i => (List.fill(h-i)("-") ++ List.fill(2*i-1)("*") ++ List.fill(h-i)("-").mkString).mkString("\n")

scala> (1 to 5).toList.map(i => List.fill(h-i)("-").mkString ++ List.fill(2*i-1)("*").mkString ++ List.fill(h-i)("-").mkString).mkString("\n")
val res74: String =
----*----
---***---
--*****--
-*******-
*********

scala> ((1 to h).toList ++ (h-1 to 1 by -1).toList).map(i => (List.fill(h-i)("-") ++ List.fill(2*i-1)("*") ++ List.fill(h-i)("-")).mkString).mkString("\n")
val res77: String =
----*----
---***---
--*****--
-*******-
*********
-*******-
--*****--
---***---
----*----


scala> (((1 to h) ++ (h-1 to 1 by -1)).toList).map(i => (List.fill(h-i)("-") ++ List.fill(2*i-1)("*") ++ List.fill(h-i)("-")).mkString * 2).mkString("\n")
val res81: String =
----*--------*----
---***------***---
--*****----*****--
-*******--*******-
******************
-*******--*******-
--*****----*****--
---***------***---
----*--------*----


scala> val K= 7
scala> val S = ((1 to h) ++ (h-1 to 1 by -1)).toList
val S: List[Int] = List(1, 2, 3, 4, 5, 4, 3, 2, 1)
val h= 9

scala> println(List.fill(4)(S).flatten.map(i => (List.fill(h-i)("-") ++ List.fill(2*i-1)("*") ++ List.fill(h-i)("-")).mkString * K).mkString("\n"))
----*--------*--------*--------*--------*--------*--------*----
---***------***------***------***------***------***------***---
--*****----*****----*****----*****----*****----*****----*****--
-*******--*******--*******--*******--*******--*******--*******-
***************************************************************
-*******--*******--*******--*******--*******--*******--*******-
--*****----*****----*****----*****----*****----*****----*****--
---***------***------***------***------***------***------***---
----*--------*--------*--------*--------*--------*--------*----
----*--------*--------*--------*--------*--------*--------*----
---***------***------***------***------***------***------***---
--*****----*****----*****----*****----*****----*****----*****--
-*******--*******--*******--*******--*******--*******--*******-
***************************************************************
-*******--*******--*******--*******--*******--*******--*******-
--*****----*****----*****----*****----*****----*****----*****--
---***------***------***------***------***------***------***---
----*--------*--------*--------*--------*--------*--------*----
----*--------*--------*--------*--------*--------*--------*----
---***------***------***------***------***------***------***---
--*****----*****----*****----*****----*****----*****----*****--
-*******--*******--*******--*******--*******--*******--*******-
***************************************************************
-*******--*******--*******--*******--*******--*******--*******-
--*****----*****----*****----*****----*****----*****----*****--
---***------***------***------***------***------***------***---
----*--------*--------*--------*--------*--------*--------*----
----*--------*--------*--------*--------*--------*--------*----
---***------***------***------***------***------***------***---
--*****----*****----*****----*****----*****----*****----*****--
-*******--*******--*******--*******--*******--*******--*******-
***************************************************************
-*******--*******--*******--*******--*******--*******--*******-
--*****----*****----*****----*****----*****----*****----*****--
---***------***------***------***------***------***------***---
----*--------*--------*--------*--------*--------*--------*----



val maxzvaigznes=7
val maxzvaigznes: Int = 7

val rombs = ((1 to maxzvaigznes) ++ ((maxzvaigznes -1) to 1 by -1)).toList
val rombs: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1)

rombiuzleju = 3
val rombiuzleju: Int = 3

val rombipalabi = 5
val rombipalabi: Int = 5

println(List.fill(rombiuzleju)(rombs).flatten.map(i => (List.fill(maxzvaigznes - i)("-") ++  List.fill(i + i - 1)("*") ++ List.fill(maxzvaigznes-i)("-")).mkString * rombipalabi).mkString("\n"))
------*------------*------------*------------*------------*------
-----***----------***----------***----------***----------***-----
----*****--------*****--------*****--------*****--------*****----
---*******------*******------*******------*******------*******---
--*********----*********----*********----*********----*********--
-***********--***********--***********--***********--***********-
*****************************************************************
-***********--***********--***********--***********--***********-
--*********----*********----*********----*********----*********--
---*******------*******------*******------*******------*******---
----*****--------*****--------*****--------*****--------*****----
-----***----------***----------***----------***----------***-----
------*------------*------------*------------*------------*------
------*------------*------------*------------*------------*------
-----***----------***----------***----------***----------***-----
----*****--------*****--------*****--------*****--------*****----
---*******------*******------*******------*******------*******---
--*********----*********----*********----*********----*********--
-***********--***********--***********--***********--***********-
*****************************************************************
-***********--***********--***********--***********--***********-
--*********----*********----*********----*********----*********--
---*******------*******------*******------*******------*******---
----*****--------*****--------*****--------*****--------*****----
-----***----------***----------***----------***----------***-----
------*------------*------------*------------*------------*------
------*------------*------------*------------*------------*------
-----***----------***----------***----------***----------***-----
----*****--------*****--------*****--------*****--------*****----
---*******------*******------*******------*******------*******---
--*********----*********----*********----*********----*********--
-***********--***********--***********--***********--***********-
*****************************************************************
-***********--***********--***********--***********--***********-
--*********----*********----*********----*********----*********--
---*******------*******------*******------*******------*******---
----*****--------*****--------*****--------*****--------*****----
-----***----------***----------***----------***----------***-----
------*------------*------------*------------*------------*------

println(List.fill(rombiuzleju)(rombs).flatten.map(i => ("-" * (maxzvaigznes - i) ++ "*" * (i + i - 1) ++ "-" * (maxzvaigznes-i)).mkString * rombipalabi).mkString("\n"))
// jo List.fill(n)("*") = "*" * n

------*------------*------------*------------*------------*------
-----***----------***----------***----------***----------***-----
----*****--------*****--------*****--------*****--------*****----
---*******------*******------*******------*******------*******---
--*********----*********----*********----*********----*********--
-***********--***********--***********--***********--***********-
*****************************************************************
-***********--***********--***********--***********--***********-
--*********----*********----*********----*********----*********--
---*******------*******------*******------*******------*******---
----*****--------*****--------*****--------*****--------*****----
-----***----------***----------***----------***----------***-----
------*------------*------------*------------*------------*------
------*------------*------------*------------*------------*------
-----***----------***----------***----------***----------***-----
----*****--------*****--------*****--------*****--------*****----
---*******------*******------*******------*******------*******---
--*********----*********----*********----*********----*********--
-***********--***********--***********--***********--***********-
*****************************************************************
-***********--***********--***********--***********--***********-
--*********----*********----*********----*********----*********--
---*******------*******------*******------*******------*******---
----*****--------*****--------*****--------*****--------*****----
-----***----------***----------***----------***----------***-----
------*------------*------------*------------*------------*------
------*------------*------------*------------*------------*------
-----***----------***----------***----------***----------***-----
----*****--------*****--------*****--------*****--------*****----
---*******------*******------*******------*******------*******---
--*********----*********----*********----*********----*********--
-***********--***********--***********--***********--***********-
*****************************************************************
-***********--***********--***********--***********--***********-
--*********----*********----*********----*********----*********--
---*******------*******------*******------*******------*******---
----*****--------*****--------*****--------*****--------*****----
-----***----------***----------***----------***----------***-----
------*------------*------------*------------*------------*------
